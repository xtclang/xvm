#
# GitHub runner workflow for building, verifying and testing the XVM repo.
#
# This is the main CI workflow that runs on every push. It builds the XDK,
# runs tests, and uploads build artifacts. Other workflows (snapshot-release,
# maven-publish-snapshot, docker-build, homebrew-update) depend on this workflow
# and are triggered automatically on master branch or manually from any branch.
#
# PLATFORM NOTES:
# - Ubuntu: ubuntu-latest (currently Ubuntu 22.04)
# - Windows: windows-latest
#
name: VerifyCommit

permissions:
    contents: write
    actions: read

on:
    # AUTOMATIC TRIGGERS DISABLED FOR TESTING
    # Uncomment the following lines to enable automatic CI on push/PR:
    # push:
    # pull_request:

    # Manual trigger - optionally triggers publishing workflows after successful completion
    # This allows testing the full publishing pipeline (snapshot, docker, homebrew) from any branch
    # without pushing to master. Set test-publishing=true to trigger publishing workflows.
    workflow_dispatch:
        inputs:
            test-publishing:
                description: 'Trigger publishing workflows after build (snapshot, docker, homebrew)'
                type: boolean
                required: false
                default: false
            platforms:
                description: 'Run only single platform (ubuntu-latest, windows-latest, or all platforms)'
                type: choice
                required: false
                default: 'all'
                options:
                    - 'all'
                    - 'ubuntu-latest'
                    - 'windows-latest'
            extra-gradle-options:
                description: 'Extra Gradle options to pass to the build'
                required: false
            test:
                description: 'Run manual tests'
                type: boolean
                required: false
                default: true
            parallel-test:
                description: 'Run manual tests in parallel mode'
                type: boolean
                required: false
                default: false

env:
    # Add manual tests as an included build to the composite build configuration
    ORG_GRADLE_PROJECT_includeBuildManualTests: true
    ORG_GRADLE_PROJECT_includeBuildAttachManualTests: true
    ORG_GRADLE_PROJECT_xtcPluginOverrideVerboseLogging: true

    # Optional flags to control manual tests
    run_manual_tests: ${{ github.event.inputs.test != 'false' }}
    run_manual_tests_parallel: ${{ github.event.inputs.parallel-test == 'true' }}

    # Gradle cache inspection function
    GRADLE_CACHE_INSPECT: |
        inspect_gradle_cache() {
            local label="${1:-}"
            local gradle_home="${GRADLE_USER_HOME:-$HOME/.gradle}"
            echo "🔍 Gradle Cache Inspection${label:+ ($label)}:"
            echo "  Cache location: $gradle_home"
            if [ ! -d "$gradle_home" ]; then
                echo "  Cache exists: ❌"
                return 0
            fi
            echo "  Cache exists: ✅"
            local total_size=$(du -sh "$gradle_home" 2>/dev/null | cut -f1 || echo "unknown")
            echo "  Cache size: $total_size"
            for dir in caches wrapper build-cache; do
                if [ -d "$gradle_home/$dir" ]; then
                    local dir_size=$(du -sh "$gradle_home/$dir" 2>/dev/null | cut -f1 || echo "unknown")
                    echo "    $dir: $dir_size"
                fi
            done
        }

# Concurrency settings: group by workflow and ref, cancel intermediate builds except on master
concurrency:
    group: "${{ github.workflow }}-${{ github.ref }}"
    cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
    build-and-test:
        strategy:
            matrix:
                os: ${{ github.event.inputs.platforms == 'ubuntu-latest' && fromJSON('["ubuntu-latest"]') || github.event.inputs.platforms == 'windows-latest' && fromJSON('["windows-latest"]') || fromJSON('["ubuntu-latest", "windows-latest"]') }}

        runs-on: ${{ matrix.os }}

        steps:
            - name: Fetch Sources
              uses: actions/checkout@v5
              with:
                  fetch-depth: 1
                  show-progress: true

            - name: Setup XVM Project
              id: versions
              uses: ./.github/actions/setup-xvm-project
              with:
                  setup-build: true
                  cache-read-only: false
                  enable-debug: true

            - name: Debug Environment (Windows)
              if: runner.os == 'Windows'
              shell: bash
              run: |
                  echo "=== Windows Debug Information ==="
                  echo "OS: $RUNNER_OS"
                  echo "Operating System: $(uname -a 2>/dev/null || echo 'N/A')"
                  echo "Java version:"
                  java -version 2>&1 || echo "Java not available"
                  echo "=== End Debug Information ==="

            - name: Dump environment info
              shell: bash
              run: |
                  echo "*** Branch (github.ref)    : ${{ github.ref }}"
                  echo "*** Commit (github.sha)    : ${{ github.sha }}"
                  echo "*** Runner OS              : ${{ runner.os }}"
                  echo "*** XDK Version            : ${{ steps.versions.outputs.xdk-version }}"
                  echo "*** Java Version           : ${{ steps.versions.outputs.java-version }}"

            - name: Build the XDK and create a distribution
              shell: bash
              env:
                  GRADLE_OPTS: ${{ steps.versions.outputs.gradle-jvm-opts }}
              run: |
                  ${{ env.GRADLE_CACHE_INSPECT }}

                    # Combine standard options with optional extra options
                    GRADLE_OPTIONS="${{ steps.versions.outputs.gradle-options }} ${{ github.event.inputs.extra-gradle-options }}"

                    cwd_path=$(pwd)
                  echo "Executing Gradle 'clean', 'check', and 'distZip' tasks from: '$cwd_path'"
                    ls -la build/ 2>/dev/null && echo "Build directory exists - will be cleaned" || echo "✅ No previous build outputs"

                    inspect_gradle_cache "before build"
                    ./gradlew $GRADLE_OPTIONS clean --info
                    ./gradlew $GRADLE_OPTIONS check -Porg.xtclang.java.lint=true -Porg.xtclang.java.warningsAsErrors=false -Porg.xtclang.java.test.stdout=true
                  ./gradlew $GRADLE_OPTIONS :xdk:distZip

                    # Run manual tests inline if enabled (avoids cache rebuild)
                    if [ "${{ env.run_manual_tests }}" != "true" ]; then
                        echo "⏭️ Manual tests skipped (disabled)"
                        exit 0
                    fi
                    echo "🧪 Running manual tests inline (cache still hot)..."
                    inspect_gradle_cache "before manual tests"
                  ./gradlew $GRADLE_OPTIONS manualTests:runXtc
                  ./gradlew $GRADLE_OPTIONS manualTests:runOne -PtestName=TestMisc
                  ./gradlew $GRADLE_OPTIONS manualTests:runTwoTestsInSequence
                    MANUAL_TASK=$( [ "${{ env.run_manual_tests_parallel }}" = "true" ] && echo "runParallel" || echo "runAllTestTasks" )
                  echo "Running manual tests: $MANUAL_TASK"
                  ./gradlew $GRADLE_OPTIONS manualTests:$MANUAL_TASK
                    inspect_gradle_cache "after manual tests"
                    echo "✅ Manual tests completed"

            - name: Upload XDK distribution artifact
              if: success() && matrix.os == 'ubuntu-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: xdk-dist-${{ github.sha }}
                  path: xdk/build/distributions/xdk-*.zip
                  retention-days: 10

            - name: Summary
              if: success()
              shell: bash
              run: |
                  echo "### ✅ Build and Test Completed" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "- **Version:** ${{ steps.versions.outputs.xdk-version }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Java Version:** ${{ steps.versions.outputs.java-version }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
