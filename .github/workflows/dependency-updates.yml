#
# GitHub workflow for handling dependency updates from Dependabot
# This workflow runs when Dependabot creates PRs for dependency updates
#
name: Dependency Updates

permissions:
  contents: write
  packages: write
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [master]
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      pr-number:
        description: 'PR number to test (leave empty for current branch)'
        required: false
      force-upload:
        description: 'Force upload dependencies even if not a dependabot PR'
        type: boolean
        required: false
        default: false

env:
  # Use same Java and Gradle settings as main CI
  java_distribution: temurin
  gradle_version: 9.0.0

  # Gradle options for dependency updates
  gradle_options: "-Dorg.gradle.vfs.verbose=false --stacktrace --console=plain"

  # CI-specific JVM options
  GRADLE_OPTS: "-Xmx4g -XX:+UseG1GC -XX:ParallelGCThreads=2 -XX:ConcGCThreads=1 -XX:+UseStringDeduplication"

jobs:
  validate-dependencies:
    name: Validate dependency updates
    runs-on: ubuntu-latest
    # Only run on dependabot PRs or when manually triggered with force-upload
    if: ${{ github.actor == 'dependabot[bot]' || github.event.inputs.force-upload == 'true' }}

    outputs:
      is-dependabot: ${{ steps.check.outputs.is-dependabot }}
      dependency-count: ${{ steps.analyze.outputs.dependency-count }}

    steps:
      - name: Check if this is a dependabot PR
        id: check
        run: |
          IS_DEPENDABOT=${{ github.actor == 'dependabot[bot]' }}
          echo "is-dependabot=$IS_DEPENDABOT" >> $GITHUB_OUTPUT
          echo "Actor: ${{ github.actor }}"
          echo "Is Dependabot: $IS_DEPENDABOT"

      - name: Fetch Sources
        uses: actions/checkout@v5
        with:
          # Fetch both base and head for proper diff analysis
          fetch-depth: 0

      - name: Get Java version from XDK properties
        id: java_version
        uses: ./.github/actions/get-java-version

      - name: Setup XVM Build Environment
        uses: ./.github/actions/setup-xvm-build
        with:
          java-version: ${{ steps.java_version.outputs.java_version }}
          java-distribution: ${{ env.java_distribution }}
          gradle-version: ${{ env.gradle_version }}
          cache-read-only: false
          enable-debug: false

      - name: Analyze dependency changes
        id: analyze
        run: |
          echo "üîç Analyzing dependency changes..."

          # Check for changes in gradle files
          GRADLE_CHANGES=$(git diff --name-only origin/master...HEAD | grep -E '\.(gradle|gradle\.kts)$' | wc -l)
          echo "Gradle files changed: $GRADLE_CHANGES"
          echo "dependency-count=$GRADLE_CHANGES" >> $GITHUB_OUTPUT

          if [ "$GRADLE_CHANGES" -gt 0 ]; then
            echo "üìã Changed Gradle files:"
            git diff --name-only origin/master...HEAD | grep -E '\.(gradle|gradle\.kts)$' | while read file; do
              echo "  - $file"
            done
          fi

      - name: Generate dependency lock files
        run: |
          echo "üîí Generating dependency lock files..."
          ./gradlew ${{ env.gradle_options }} dependencies --write-locks

      - name: Clean build directory
        run: |
          echo "üßπ Cleaning build directory..."
          ./gradlew ${{ env.gradle_options }} clean

      - name: Run basic validation build
        run: |
          echo "‚úÖ Running validation build to ensure dependencies resolve..."
          ./gradlew ${{ env.gradle_options }} build -x test --info

      - name: Check for dependency vulnerabilities
        run: |
          echo "üõ°Ô∏è Checking for known vulnerabilities..."
          # Run dependency verification if available
          ./gradlew ${{ env.gradle_options }} dependencyCheckAnalyze || echo "‚ö†Ô∏è Dependency check not available or failed"

  auto-approve:
    name: Auto-approve dependabot PRs
    needs: validate-dependencies
    runs-on: ubuntu-latest
    if: ${{ needs.validate-dependencies.outputs.is-dependabot == 'true' && success() }}

    steps:
      - name: Auto-approve dependabot PR
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Only auto-approve if all checks passed
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            // Add approval
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'APPROVE',
              body: '‚úÖ Auto-approved after successful dependency validation'
            });

            // Add informative comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `ü§ñ **Dependency Update Auto-Approval**

              This Dependabot PR has been automatically approved after:
              - ‚úÖ Dependency validation passed
              - ‚úÖ Build with updated dependencies succeeded

              The PR is ready for manual review and merge by maintainers.`
            });