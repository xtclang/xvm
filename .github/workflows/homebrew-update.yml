#
# GitHub workflow for updating Homebrew tap
#
# This workflow updates the Homebrew formula with the latest XDK snapshot release.
# It triggers automatically on master after CI completes, or can be manually triggered.
#
name: Update Homebrew

permissions:
    contents: read
    actions: read

on:
    # Automatic trigger after CI completes on master
    workflow_run:
        workflows: ["VerifyCommit"]
        types: [completed]
        branches: [master]

    # Manual trigger from any branch
    workflow_dispatch:
        inputs:
            xdk-version:
                description: 'XDK version to publish (leave empty to use latest from version.properties)'
                required: false

jobs:
    update-homebrew:
        name: Update Homebrew tap
        runs-on: ubuntu-latest
        if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}

        steps:
            - name: Fetch Sources
              uses: actions/checkout@v5

            - name: Get versions
              id: versions
              uses: ./.github/actions/get-versions

            - name: Determine XDK version
              id: version
              shell: bash
              run: |
                  if [ -n "${{ github.event.inputs.xdk-version }}" ]; then
                      VERSION="${{ github.event.inputs.xdk-version }}"
                      echo "Using manual version: $VERSION"
                  else
                      VERSION="${{ steps.versions.outputs.xdk-version }}"
                      echo "Using version from version.properties: $VERSION"
                  fi
                  echo "xdk-version=$VERSION" >> $GITHUB_OUTPUT

            - name: Download XDK from snapshot release
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Determine the commit we're building for
                  if [ "${{ github.event_name }}" = "workflow_run" ]; then
                      EXPECTED_COMMIT="${{ github.event.workflow_run.head_sha }}"
                      echo "üìå Building for commit from workflow_run: $EXPECTED_COMMIT"
                  else
                      EXPECTED_COMMIT="${{ github.sha }}"
                      echo "üìå Building for commit from manual trigger: $EXPECTED_COMMIT"
                  fi

                  echo "üì• Downloading XDK from snapshot release..."
                  gh release download xdk-latest-snapshot --pattern "xdk-*.zip" --repo ${{ github.repository }}
                  XDK_ZIP=$(find . -name "xdk-*.zip" | head -1)
                  if [ -z "$XDK_ZIP" ]; then
                      echo "‚ùå Failed to download XDK from snapshot release"
                      exit 1
                  fi
                  echo "‚úÖ Downloaded: $(basename "$XDK_ZIP")"

                  # Validate snapshot matches expected commit
                  echo "üîç Validating snapshot release matches expected commit..."
                  RELEASE_INFO=$(gh release view xdk-latest-snapshot --repo ${{ github.repository }} --json body,tagName)
                  RELEASE_COMMIT=$(echo "$RELEASE_INFO" | jq -r '.body' | grep -oP '(?<=\*\*Commit:\*\* )[a-f0-9]{40}' || echo "")

                  if [ -z "$RELEASE_COMMIT" ]; then
                      echo "‚ö†Ô∏è  WARNING: Could not extract commit from release notes"
                      echo "‚ö†Ô∏è  Snapshot may not match expected commit $EXPECTED_COMMIT"
                      echo "‚ö†Ô∏è  Proceeding anyway (manual trigger or old release format)"
                  elif [ "$RELEASE_COMMIT" != "$EXPECTED_COMMIT" ]; then
                      echo "‚ùå ERROR: Snapshot commit mismatch!"
                      echo "   Expected: $EXPECTED_COMMIT"
                      echo "   Got:      $RELEASE_COMMIT"
                      echo ""
                      echo "This usually means another CI run updated the snapshot while this workflow was queued."
                      echo "The snapshot release should match the commit that triggered this workflow."
                      exit 1
                  else
                      echo "‚úÖ Snapshot commit matches: $RELEASE_COMMIT"
                  fi

            - name: Update Homebrew formula
              env:
                  HOMEBREW_TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
              run: |
                  echo "üç∫ Updating Homebrew tap..."

                  if [ -z "$HOMEBREW_TAP_TOKEN" ]; then
                      echo "‚ùå HOMEBREW_TAP_TOKEN secret not configured"
                      echo "‚ö†Ô∏è Cannot update Homebrew tap without token"
                      exit 1
                  fi

                  # Get download URL for the snapshot release asset
                  XDK_ZIP=$(find . -name "xdk-*.zip" | head -1)
                  XDK_ZIP_NAME=$(basename "$XDK_ZIP")
                  SHA256=$(shasum -a 256 "$XDK_ZIP" | cut -d' ' -f1)

                  DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/xdk-latest-snapshot/$XDK_ZIP_NAME"

                  echo "Formula details:"
                  echo "  Version: ${{ steps.version.outputs.xdk-version }}"
                  echo "  URL: $DOWNLOAD_URL"
                  echo "  SHA256: $SHA256"

                  # Clone homebrew tap
                  git clone https://oauth2:${HOMEBREW_TAP_TOKEN}@github.com/xtclang/homebrew-xvm.git homebrew-tap
                  cd homebrew-tap

                  # Update formula
                  cat > Formula/xdk.rb <<EOF
                  class Xdk < Formula
                    desc "Ecstasy language XDK (XTC Development Kit)"
                    homepage "https://xtclang.org"
                    url "$DOWNLOAD_URL"
                    sha256 "$SHA256"
                    version "${{ steps.version.outputs.xdk-version }}"

                    def install
                      libexec.install Dir["*"]
                      bin.install_symlink libexec/"bin/xec"
                      bin.install_symlink libexec/"bin/xcc"
                      bin.install_symlink libexec/"bin/xtc"
                    end

                    test do
                      assert_match version.to_s, shell_output("#{bin}/xec --version")
                    end
                  end
                  EOF

                  # Commit and push
                  git config user.name "GitHub Actions"
                  git config user.email "actions@github.com"
                  git add Formula/xdk.rb
                  git commit -m "Update XDK to version ${{ steps.version.outputs.xdk-version }}"
                  git push

                  echo "‚úÖ Homebrew tap updated"

            - name: Summary
              if: success()
              run: |
                  echo "### ‚úÖ Homebrew Tap Updated" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "- **Version:** ${{ steps.version.outputs.xdk-version }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "Users can now install with:" >> $GITHUB_STEP_SUMMARY
                  echo '```bash' >> $GITHUB_STEP_SUMMARY
                  echo "brew tap xtclang/xvm" >> $GITHUB_STEP_SUMMARY
                  echo "brew install xdk" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
