#
# GitHub runner workflow for building, verifying and testing the XVM repo.
#
name: XVM Verification and Package Updates

on:
  push:
  workflow_dispatch:
    inputs:
      always_publish_snapshot:
        description: 'Always publish snapshot regardless of branch'
        type: boolean
        required: false
        default: false
      extra_gradle_options:
        description: 'Extra Gradle options to pass to the build'
        required: false
      skip_manual_tests:
        description: 'Skip manual tests'
        type: boolean
        required: false
        default: false
      skip_manual_tests_parallel:
        description: 'Skip parallel manual tests'
        type: boolean
        required: false
        default: false

env:
  # TODO: Default should be disabled; we only want to be bothered by tagging and publishing for the master branch.
  always_publish_snapshot: ${{ github.event.inputs.always_publish_snapshot }}

  # Add manual tests as an included build to the composite build configuration, and also build them.
  ORG_GRADLE_PROJECT_includeBuildManualTests: true
  ORG_GRADLE_PROJECT_includeBuildAttachManualTests: true
  ORG_GRADLE_PROJECT_xtcPluginOverrideVerboseLogging: true

  # Add sanity checks that the javatools fatjar contains appropriate classes and dependencies
  ORG_XTCLANG_JAVATOOLS_SANITY_CHECK_JAR: true

  # Secrets (TODO: Verify plugin portal and maven central/sonatype credentials)
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GRADLE_PUBLISH_KEY: ${{ secrets.ORG_XTCLANG_GRADLE_PLUGIN_PORTAL_PUBLISH_KEY }}
  GRADLE_PUBLISH_SECRET: ${{ secrets.ORG_XTCLANG_GRADLE_PLUGIN_PORTAL_PUBLISH_SECRET }}
  GPG_SIGNING_KEY: ${{ secrets.ORG_XTCLANG_GPG_SIGNING_KEY }}
  GPG_SIGNING_PASSWORD: ${{ secrets.ORG_XTCLANG_GPG_SIGNING_PASSWORD }}
  MAVEN_CENTRAL_USERNAME: ${{ secrets.ORG_XTCLANG_MAVEN_CENTRAL_USERNAME }}
  MAVEN_CENTRAL_PASSWORD: ${{ secrets.ORG_XTCLANG_MAVEN_CENTRAL_PASSWORD }}

  gradle_options: "-Dorg.gradle.caching.debug=false -Dorg.gradle.vfs.verbose=false --stacktrace --warning-mode=all --console=plain ${{ inputs.extra_gradle_options }}"

  # Optional flags to skip manual tests, or at least some of them.
  skip_manual_tests: ${{ github.event.inputs.skip_manual_tests == 'true' }}
  skip_manual_tests_parallel: ${{ github.event.inputs.skip_manual_tests_parallel == 'true' }}

  java_version: 21
  java_distribution: temurin
  gradle_version: 8.14.2

  # Build environment and build workflow debug flags.
  # ACTIONS_RUNNER_DEBUG: true
  # ACTIONS_STEP_DEBUG: true
  GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

# Concurrency settings: group by workflow and ref, cancel intermediate builds, but only if it's a pull request build.
concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  build-verify:

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          show-progress: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.java_distribution }}
          java-version: ${{ env.java_version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: false
          cache-read-only: false
          gradle-version: ${{ env.gradle_version }}

      - name: Validate Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v4

      - name: Dump environment info
        shell: bash
        run: |
          echo "*** Branch (github.ref)    : ${{ github.ref }}"
          echo "*** Commit (github.sha)    : ${{ github.sha }}"
          echo "*** Runner OS              : ${{ runner.os }}"
          echo "*** Input always_publish_snapshot: '${{ github.event.inputs.always_publish_snapshot }}'"
          echo "*** Input type: (not available in GitHub Actions)"
          echo "*** Comparison result: ${{ github.event.inputs.always_publish_snapshot }}"
          echo "*** String comparison: ${{ github.event.inputs.always_publish_snapshot == 'true' }}"
          echo "*** Java system properties :" 
          java -XshowSettings:properties --version

      - name: Build the XDK and create a distribution layout
        shell: bash
        run: |
          cwd_path=$(pwd)
          echo "Executing Gradle 'installDist' task from path: '$cwd_path'"
          ./gradlew clean
          ./gradlew ${{ env.gradle_options }} installDist 

      - name: Build a machine specific XDK installation with native launchers, test run launchers on native platform
        shell: bash
        run: |
          ./gradlew ${{ env.gradle_options }} xdk:installWithLaunchersDist
          xcc_path=$(find xdk/build/install/ -name xcc)
          xec_path=$(find xdk/build/install/ -name xec)
          echo "Location of native launcher (xcc): $xcc_path"
          echo "Location of native launcher (xec): $xec_path"
          echo "*** Testing native launchers, verifying their binary format and that they run on this platform..."
          xcc_file=$(file $xcc_path)
          xec_file=$(file $xec_path)
          xcc_version=$($xcc_path --version)
          xec_version=$($xec_path --version)
          echo "    xcc:"
          echo "        file   : $xcc_file"
          echo "        version: $xcc_version"
          echo "    xec:"
          echo "        file   : $xec_file"
          echo "        version: $xec_version"
          echo "*** Native launchers work."

      - name: Default manualTest tasks
        if: ${{ !github.event.inputs.skip_manual_tests }}
        timeout-minutes: 5
        shell: bash
        run: |
          ./gradlew ${{ env.gradle_options }} manualTests:runXtc
          ./gradlew ${{ env.gradle_options }} manualTests:runOne -PtestName=TestMisc
          ./gradlew ${{ env.gradle_options }} manualTests:runTwoTestsInSequence
          echo "*** manualTests:runParallel: ${{ env.skip_manual_tests_parallel }}"

      - name: Parallel manualTest task
        timeout-minutes: 5
        if: ${{ !github.event.inputs.skip_manual_tests_parallel }}
        shell: bash
        run: |
          ./gradlew ${{ env.gradle_options }} manualTests:runParallel

      - name: Upload build artifacts
        if: ${{ success() && matrix.os == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v4
        with:
          name: xdk-distribution
          path: |
            xdk/build/distributions/
            xdk/build/install/
          retention-days: 1

  publish-snapshot:
    name: Publish to GitHub packages iff snapshot + non-redundant build platform + branch is master
    # Only run if ALL build-verify matrix jobs succeed (both ubuntu-latest and windows-latest)
    needs: build-verify
    runs-on: ubuntu-latest
    if: ${{ success() && ((github.event.inputs.always_publish_snapshot) || (github.ref == 'refs/heads/master')) }}
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Set up Java environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.java_distribution }}
          java-version: ${{ env.java_version }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: false
          cache-read-only: false
          gradle-version: ${{ env.gradle_version }}

      - name: Verify all tests passed
        run: |
          echo "✅ All build-verify matrix jobs (Ubuntu + Windows) completed successfully"
          echo "✅ All tests passed - proceeding with publication"

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: xdk-distribution
          path: .

      - name: Dump environment info
        shell: bash
        run: |
          echo "*** Branch (github.ref)    : ${{ github.ref }}"
          echo "*** Commit (github.sha)    : ${{ github.sha }}"
          echo "*** Runner OS              : ${{ runner.os }}"
          echo "*** Workflow inputs:"
          echo "    always_publish_snapshot (raw): '${{ github.event.inputs.always_publish_snapshot }}'"
          echo "    always_publish_snapshot (env): '${{ env.always_publish_snapshot }}'"
          echo "*** Java system properties :" 
          java -XshowSettings:properties --version

      - name: Create or Update Snapshot (if pushed to 'master', or env.always_publish_snapshot is true)
        if: ${{ (github.event.inputs.always_publish_snapshot) || (github.ref == 'refs/heads/master') }}
        shell: bash
        run: |
          ./gradlew clean
          ./gradlew ${{ env.gradle_options }} xdk:ensureTags -PsnapshotOnly=true
          ./gradlew ${{ env.gradle_options }} publishRemote -PsnapshotOnly=true

  docker-build:
    name: Build and push Docker images
    needs: build-verify
    runs-on: ${{ matrix.runner }}
    if: ${{ success() && ((github.event.inputs.always_publish_snapshot) || (github.ref == 'refs/heads/master')) }}
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            arch: arm64
            runner: ubuntu-24.04-arm
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Note: Dockerfile is self-contained and downloads source itself
      # No need to download artifacts since Docker build will fetch source

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image (${{ matrix.arch }})
        shell: bash
        run: |
          echo "Building and pushing ${{ matrix.arch }} Docker image on native hardware..."
          
          # Get version from VERSION file
          VERSION=$(cat VERSION | tr -d '\n\r ')
          COMMIT_SHA=${GITHUB_SHA::8}
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          echo "DEBUG: VERSION=$VERSION"
          echo "DEBUG: COMMIT_SHA=$COMMIT_SHA"
          echo "DEBUG: BRANCH_NAME=$BRANCH_NAME"
          
          # Set base image name based on branch
          if [ "$BRANCH_NAME" = "master" ]; then
            BASE_IMAGE="ghcr.io/xtclang/xvm"
          else
            BASE_IMAGE="ghcr.io/xtclang/xvm_${BRANCH_NAME}"
          fi
          
          docker buildx build \
            --platform ${{ matrix.platform }} \
            --tag ${BASE_IMAGE}:latest-${{ matrix.arch }} \
            --tag ${BASE_IMAGE}:${VERSION}-${{ matrix.arch }} \
            --tag ${BASE_IMAGE}:${COMMIT_SHA}-${{ matrix.arch }} \
            --build-arg VERSION=$BRANCH_NAME \
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
            --build-arg VCS_REF=${GITHUB_SHA} \
            --cache-from type=gha,scope=${{ matrix.arch }} \
            --cache-to type=gha,mode=max,scope=${{ matrix.arch }} \
            --push \
            .

  docker-manifest:
    name: Create multi-platform manifest
    needs: docker-build
    runs-on: ubuntu-latest
    if: ${{ success() && ((github.event.inputs.always_publish_snapshot) || (github.ref == 'refs/heads/master')) }}
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifests
        shell: bash
        run: |
          echo "Creating multi-platform manifests..."
          
          # Get version from VERSION file
          VERSION=$(cat VERSION | tr -d '\n\r ')
          COMMIT_SHA=${GITHUB_SHA::8}
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          
          # Set base image name based on branch
          if [ "$BRANCH_NAME" = "master" ]; then
            BASE_IMAGE="ghcr.io/xtclang/xvm"
          else
            BASE_IMAGE="ghcr.io/xtclang/xvm_${BRANCH_NAME}"
          fi
          
          echo "Creating manifests for: ${BASE_IMAGE} (version: ${VERSION})"
          
          # Create latest manifest
          docker manifest create ${BASE_IMAGE}:latest \
            ${BASE_IMAGE}:latest-amd64 \
            ${BASE_IMAGE}:latest-arm64
          docker manifest push ${BASE_IMAGE}:latest
          
          # Create version manifest (also branch-aware)
          docker manifest create ${BASE_IMAGE}:${VERSION} \
            ${BASE_IMAGE}:${VERSION}-amd64 \
            ${BASE_IMAGE}:${VERSION}-arm64
          docker manifest push ${BASE_IMAGE}:${VERSION}
          
          # Create commit manifest (also branch-aware)
          docker manifest create ${BASE_IMAGE}:${COMMIT_SHA} \
            ${BASE_IMAGE}:${COMMIT_SHA}-amd64 \
            ${BASE_IMAGE}:${COMMIT_SHA}-arm64
          docker manifest push ${BASE_IMAGE}:${COMMIT_SHA}
