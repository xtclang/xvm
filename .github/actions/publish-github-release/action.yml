#
# Publishes XDK distribution to GitHub Release
#
# This action takes a build artifact and publishes it to a GitHub Release with
# version-based naming. Supports both snapshot (overwrites) and release (tagged) modes.
#
name: 'Publish GitHub Release'
description: 'Publishes XDK build artifact to GitHub Release with version-based naming'

inputs:
    artifact-path:
        description: 'Path to the XDK distribution zip file (build artifact)'
        required: true
    xdk-version:
        description: 'XDK version (e.g., 0.4.4-SNAPSHOT or 0.4.4)'
        required: true
    commit:
        description: 'Commit SHA for release metadata'
        required: true
    repo:
        description: 'Repository in format owner/repo'
        required: true
    github-token:
        description: 'GitHub token with contents:write permission'
        required: true
    release-type:
        description: 'Type of release: "snapshot" (overwrites) or "release" (tagged)'
        required: true
    release-tag:
        description: 'Release tag to create/update (e.g., "xdk-snapshots" or "v0.4.4")'
        required: false

outputs:
    release-url:
        description: 'URL of the published release'
        value: ${{ steps.publish.outputs.release-url }}
    asset-name:
        description: 'Name of the published asset'
        value: ${{ steps.publish.outputs.asset-name }}

runs:
    using: 'composite'
    steps:
        - name: Publish to GitHub Release
          id: publish
          shell: bash
          env:
              GH_TOKEN: ${{ inputs.github-token }}
          run: |
              ARTIFACT_PATH="${{ inputs.artifact-path }}"
              VERSION="${{ inputs.xdk-version }}"
              COMMIT="${{ inputs.commit }}"
              REPO="${{ inputs.repo }}"
              RELEASE_TYPE="${{ inputs.release-type }}"

              # Determine release tag
              if [ -n "${{ inputs.release-tag }}" ]; then
                  RELEASE_TAG="${{ inputs.release-tag }}"
              elif [ "$RELEASE_TYPE" = "snapshot" ]; then
                  RELEASE_TAG="xdk-snapshots"
              else
                  RELEASE_TAG="v${VERSION}"
              fi

              echo "📦 Publishing XDK to GitHub Release"
              echo "  Type:    $RELEASE_TYPE"
              echo "  Tag:     $RELEASE_TAG"
              echo "  Version: $VERSION"
              echo "  Commit:  $COMMIT"
              echo ""

              # Verify artifact exists
              if [ ! -f "$ARTIFACT_PATH" ]; then
                  echo "❌ Artifact not found: $ARTIFACT_PATH"
                  exit 1
              fi

              # Create version-named file
              ASSET_NAME="xdk-${VERSION}.zip"
              cp "$ARTIFACT_PATH" "$ASSET_NAME"
              echo "📝 Created: $ASSET_NAME (from $(basename "$ARTIFACT_PATH"))"
              ls -lh "$ASSET_NAME"
              echo ""

              # Create or update release
              if [ "$RELEASE_TYPE" = "snapshot" ]; then
                  # Snapshot: update existing release or create new one
                  if gh release view "$RELEASE_TAG" --repo "$REPO" >/dev/null 2>&1; then
                      echo "📥 Uploading to existing snapshot release: $RELEASE_TAG"
                      gh release upload "$RELEASE_TAG" "$ASSET_NAME" \
                          --repo "$REPO" \
                          --clobber
                      RELEASE_URL=$(gh release view "$RELEASE_TAG" --repo "$REPO" --json url --jq '.url')
                  else
                      echo "🆕 Creating new snapshot release: $RELEASE_TAG"
                      gh release create "$RELEASE_TAG" \
                          "$ASSET_NAME" \
                          --repo "$REPO" \
                          --title "XDK Snapshot Builds" \
                          --notes "**Automated snapshot builds from master branch**

              Latest snapshot version: **${VERSION}**
              Build commit: \`${COMMIT}\`

              Download the \`xdk-${VERSION}.zip\` asset below for the most recent snapshot build." \
                          --prerelease \
                          --latest=false
                      RELEASE_URL=$(gh release view "$RELEASE_TAG" --repo "$REPO" --json url --jq '.url')
                  fi
              else
                  # Release: create new tagged release
                  echo "🎉 Creating release: $RELEASE_TAG"

                  # Check if release already exists
                  if gh release view "$RELEASE_TAG" --repo "$REPO" >/dev/null 2>&1; then
                      echo "⚠️  Release $RELEASE_TAG already exists"
                      RELEASE_URL=$(gh release view "$RELEASE_TAG" --repo "$REPO" --json url --jq '.url')
                  else
                      gh release create "$RELEASE_TAG" \
                          "$ASSET_NAME" \
                          --repo "$REPO" \
                          --title "XDK ${VERSION}" \
                          --notes "# XDK Release ${VERSION}

              **This is a DRAFT release - review and manually publish when ready.**

              ## Installation

              Download \`xdk-${VERSION}.zip\` from the assets below.

              ---

              **Commit:** ${COMMIT}
              **Built:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" \
                          --draft \
                          --target "$COMMIT"
                      RELEASE_URL=$(gh release view "$RELEASE_TAG" --repo "$REPO" --json url --jq '.url')
                  fi
              fi

              echo ""
              echo "✅ Published: $ASSET_NAME"
              echo "🔗 Release: $RELEASE_URL"

              echo "release-url=$RELEASE_URL" >> $GITHUB_OUTPUT
              echo "asset-name=$ASSET_NAME" >> $GITHUB_OUTPUT

branding:
    icon: 'upload-cloud'
    color: 'blue'
