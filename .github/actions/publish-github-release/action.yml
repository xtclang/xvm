#
# Publishes XDK distribution to GitHub Release
#
# This action takes a build artifact and publishes it to a GitHub Release with
# version-based naming. Supports both snapshot (overwrites) and release (tagged) modes.
#
name: 'Publish GitHub Release'
description: 'Publishes XDK build artifact to GitHub Release with version-based naming'

inputs:
    artifact-path:
        description: 'Path to the XDK distribution zip file (build artifact)'
        required: true
    xdk-version:
        description: 'XDK version (e.g., 0.4.4-SNAPSHOT or 0.4.4)'
        required: true
    commit:
        description: 'Commit SHA for release metadata'
        required: true
    repo:
        description: 'Repository in format owner/repo'
        required: true
    github-token:
        description: 'GitHub token with contents:write permission'
        required: true
    release-type:
        description: 'Type of release: "snapshot" (overwrites) or "release" (tagged draft)'
        required: true
    release-tag:
        description: 'Release tag (defaults: "xdk-snapshots" for snapshot, "v${VERSION}" for release)'
        required: false

outputs:
    release-url:
        description: 'URL of the published release'
        value: ${{ steps.output-snapshot.outputs.release-url || steps.output-release.outputs.release-url }}
    asset-name:
        description: 'Name of the published asset'
        value: ${{ steps.prepare.outputs.asset-name }}

runs:
    using: 'composite'
    steps:
        - name: Prepare release asset
          id: prepare
          shell: bash
          run: |
              ARTIFACT_PATH="${{ inputs.artifact-path }}"
              VERSION="${{ inputs.xdk-version }}"
              COMMIT="${{ inputs.commit }}"
              RELEASE_TYPE="${{ inputs.release-type }}"

              echo "üì¶ Preparing GitHub Release"
              echo "  Type:    $RELEASE_TYPE"
              echo "  Version: $VERSION"
              echo "  Commit:  $COMMIT"

              # Verify artifact exists
              if [ ! -f "$ARTIFACT_PATH" ]; then
                  echo "‚ùå Artifact not found: $ARTIFACT_PATH"
                  exit 1
              fi

              # Create version-named file
              ASSET_NAME="xdk-${VERSION}.zip"
              cp "$ARTIFACT_PATH" "$ASSET_NAME"
              echo "üìù Created: $ASSET_NAME (from $(basename "$ARTIFACT_PATH"))"
              ls -lh "$ASSET_NAME"

              echo "asset-name=$ASSET_NAME" >> $GITHUB_OUTPUT

        - name: Publish snapshot release
          if: inputs.release-type == 'snapshot'
          id: publish-snapshot
          shell: bash
          env:
              GH_TOKEN: ${{ inputs.github-token }}
          run: |
              ASSET_NAME="${{ steps.prepare.outputs.asset-name }}"
              VERSION="${{ inputs.xdk-version }}"
              COMMIT="${{ inputs.commit }}"
              REPO="${{ inputs.repo }}"
              RELEASE_TAG="${{ inputs.release-tag }}"

              # Default to xdk-snapshots if not specified
              if [ -z "$RELEASE_TAG" ]; then
                  RELEASE_TAG="xdk-snapshots"
              fi

              echo "üì• Publishing snapshot to: $RELEASE_TAG"

              # Create or update snapshot release
              if gh release view "$RELEASE_TAG" --repo "$REPO" >/dev/null 2>&1; then
                  echo "Uploading to existing snapshot release..."
                  gh release upload "$RELEASE_TAG" "$ASSET_NAME" \
                      --repo "$REPO" \
                      --clobber
              else
                  echo "Creating new snapshot release..."
                  gh release create "$RELEASE_TAG" \
                      "$ASSET_NAME" \
                      --repo "$REPO" \
                      --title "XDK Snapshot Builds" \
                      --notes "**Automated snapshot builds from master branch**

              Latest snapshot version: **${VERSION}**
              Build commit: \`${COMMIT}\`

              Download the \`xdk-${VERSION}.zip\` asset below for the most recent snapshot build." \
                      --prerelease \
                      --latest=false
              fi

              echo "‚úÖ Snapshot published: $ASSET_NAME"

        - name: Get snapshot release URL
          if: inputs.release-type == 'snapshot'
          id: output-snapshot
          shell: bash
          env:
              GH_TOKEN: ${{ inputs.github-token }}
          run: |
              RELEASE_TAG="${{ inputs.release-tag }}"
              if [ -z "$RELEASE_TAG" ]; then
                  RELEASE_TAG="xdk-snapshots"
              fi
              RELEASE_URL=$(gh release view "$RELEASE_TAG" --repo "${{ inputs.repo }}" --json url --jq '.url')
              echo "üîó Release: $RELEASE_URL"
              echo "release-url=$RELEASE_URL" >> $GITHUB_OUTPUT

        - name: Publish draft release
          if: inputs.release-type == 'release'
          id: publish-release
          shell: bash
          env:
              GH_TOKEN: ${{ inputs.github-token }}
          run: |
              ASSET_NAME="${{ steps.prepare.outputs.asset-name }}"
              VERSION="${{ inputs.xdk-version }}"
              COMMIT="${{ inputs.commit }}"
              REPO="${{ inputs.repo }}"
              RELEASE_TAG="${{ inputs.release-tag }}"

              # Default to v${VERSION} if not specified
              if [ -z "$RELEASE_TAG" ]; then
                  RELEASE_TAG="v${VERSION}"
              fi

              echo "üéâ Creating draft release: $RELEASE_TAG"

              # Check if release already exists and delete it
              if gh release view "$RELEASE_TAG" --repo "$REPO" >/dev/null 2>&1; then
                  echo "‚ö†Ô∏è  Release $RELEASE_TAG already exists, deleting..."
                  gh release delete "$RELEASE_TAG" --yes --repo "$REPO"
              fi

              # Create draft release with Git tag
              gh release create "$RELEASE_TAG" \
                  "$ASSET_NAME" \
                  --repo "$REPO" \
                  --title "XDK ${VERSION}" \
                  --notes "# XDK Release ${VERSION}

              **This is a DRAFT release - review and manually publish when ready.**

              ## What's Changed

              <!-- TODO: Fill in release notes before publishing -->
              - TODO: Add release notes
              - TODO: Highlight major changes
              - TODO: Document breaking changes (if any)

              ## Installation

              ### Homebrew
              \`\`\`sh
              brew tap xtclang/xvm
              brew install xdk
              \`\`\`

              ### Maven
              \`\`\`xml
              <dependency>
                  <groupId>org.xtclang</groupId>
                  <artifactId>xdk</artifactId>
                  <version>${VERSION}</version>
              </dependency>
              \`\`\`

              ### Gradle Plugin
              \`\`\`kotlin
              plugins {
                  id(\"org.xtclang.xtc-plugin\") version \"${VERSION}\"
              }
              \`\`\`

              ### Direct Download
              Download the \`xdk-${VERSION}.zip\` asset below.

              ---

              **Commit:** ${COMMIT}
              **Built:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

              ü§ñ Generated with [Claude Code](https://claude.com/claude-code)" \
                  --draft \
                  --target "$COMMIT"

              echo "‚úÖ Draft release created: $RELEASE_TAG"

        - name: Get release URL
          if: inputs.release-type == 'release'
          id: output-release
          shell: bash
          env:
              GH_TOKEN: ${{ inputs.github-token }}
          run: |
              RELEASE_TAG="${{ inputs.release-tag }}"
              VERSION="${{ inputs.xdk-version }}"
              if [ -z "$RELEASE_TAG" ]; then
                  RELEASE_TAG="v${VERSION}"
              fi
              RELEASE_URL=$(gh release view "$RELEASE_TAG" --repo "${{ inputs.repo }}" --json url --jq '.url')
              echo "üîó Release: $RELEASE_URL"
              echo "‚ö†Ô∏è  IMPORTANT: This is a DRAFT release"
              echo "   1. Review the release notes and edit as needed"
              echo "   2. After Maven Central is released, manually publish this GitHub release"
              echo "release-url=$RELEASE_URL" >> $GITHUB_OUTPUT

branding:
    icon: 'upload-cloud'
    color: 'blue'
