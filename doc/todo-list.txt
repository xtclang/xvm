- GG: add support for runtime constants that cross the module line; may need to restore the removed
      delegation logic in ConverterExpression

- CP: a content-type header for FormData has the following format:
    multipart/form-data; boundary=---------------------------1612195806993123533773008794
  the logic in MediaType.of() does not recognize it as parameters; simply drops it

- CP: add API support for multi-part body, for example (Body.x):
    conditional Body[] multipart() = False;

- GG: improve FileExpression, LiteralExpression for LIT_BINSTR and LIT_STRING to retain the "origin" File
  and produce one or more FSNodeConstants that the resulting Constant (e.g.: ByteArray or String)
  optionally depends on; this will allow "upToDate" computation in the Launcher.java to figure out
  whether a rebuild of the module is required

- GG: add the following method to Tuple
        /**
         * Obtain a `List` view of this Tuple. Note, that the type check will be performed only
         * during element extraction, not when this call is made.
         *
         * @param  the type of the element in the list
         *
         * @return the list view
         */
        <ElementType> List<ElementType> asList(Type<ElementType> elementType = Object)


- CP: BinaryInput:
    - readBytes() methods need to return the number of bytes read
    - would be nice to have an "eof" indicator

- what to do about passing a const/service argument from a child container into the parent's one?

- GG: entering the debugger should stop time

- GG: consider allowing to debug an eval expression (debug eval)

- lambda capture of a non-effectively final var as a Ref or Var needs to be explicitly allowed
  by the code; for example: "@AllowCapture String name = ..."
  Alternatively, we could have @CaptureByValue that would be equivalent of creating a synthetic
  effectively final value to capture.

- GG: consider changing Service.callLater() API to
    <Result> Future<Result> callLater(function Result doLater());

- consider a @Proxy annotation for mutable service properties to create a delegation pattern (see
  SessionImpl.attributes)

- add a method to Map API to evaluate the "worst lookup cost" based on the current content
  (Mark's suggestion to evaluated keys' hashCode distribution)

- GG: implement timeout for IO operations (interrupt IO executor threads)

- CP: change TxManager.NO_TX to Int64.MinValue or -1

- CP: need to implement "persistent" mutators for HasherMap

- how to move ecstasy.mgmt package to a separate module? FileTemplate depends on ModuleRepository...

- GG: enum ClassCompositions without type parameters could be made into CanonicalCompositions

- consider allowing comparison between T and T?; for example making Null always "Lesser"

- add a periodic re-schedule to Timer API

- consider using (new ConcurrentSection()) to get "pre-switching" notification

- compiler to report on ambiguous type parameter name across a virtual child and its parent(s)

- add deadlock detection

- would be nice if we could figure out how to compute the inferred types for regular cases and the
    residual type for the "default" switch case, e.g.:

    Boolean test(Boolean|Int value)
        {
        switch (value)
            {
            case True, False:
                return value;      // the compiler could figure out the value is a Boolean
            default:
                return value > 0;  // the compiler could figure out the value is an Int
            }
        }

- CP: consider adding specialized String.append(Char c) and String.append(String s)

- consider not needing the ^ for a return of a tail-call invocation (except in a try block?)
    "return foo();" should be equivalent to "return foo^();"

- CP: consider a compiler warning if a return value of Closeable type is ignored (@Adopt annotation)

- consider a new Async mixin:
        mixin Async into Object implements Service {}
  allowing to turn a mutable class into a service:
        ErrorList errs = new @Async ErrorList(10);

- add compiler support for conditional Tuple

- consider adding a V_GET opcode that would combine the functionality of L_GET and MOVE_THIS for
  dynamically inflated (via & ref) or non-inflated properties; it would eliminate the need for
  corresponding compensation in ClassTemplate.getPropertyValue() and OpInvocable.getCallChain()
  (submission "Fix Ref handling for non-inflated properties" of 8/9/2022)

- GG: optimize-out unnecessary array cloning by changing getBytes() to copyBytes(arrayInto)

- consider @Proxyable annotation for compiler to enforce proxy-ability of an interface

// DEFERRED:
- classes in methods don't support captures of formal types
- @Atomic property with a mutable content needs to wrap
- what if timer.schedule() lambda throws? (exception is invisible)
- infinite loop detection
- long object handle
- upon a Future's gc report if an exception has not been handled