//noinspection

/**
 * This is an init script that can generate an xtc-repo.init.gradle.kts file under the
 * GRADLE_USER_HOME/init.d directory, or similar locations. To install it from the XDK
 * repository, run './gradlew installInitScripts'. This is something you normally only
 * have to do once.
 *
 * Info about GitHub requiring credentials for public Maven packages, which is crazy:
 *     https://docs.github.com/en/packages/learn-github-packages/about-github-packages#authenticating-to-github-packages
 *     https://github.com/orgs/community/discussions/26634
 */

import java.io.InputStream
import java.net.URI
import java.util.Properties
import java.nio.file.Path
import kotlin.io.encoding.Base64
import kotlin.io.encoding.ExperimentalEncodingApi
import kotlin.io.path.isDirectory

gradle.beforeSettings {
    settings.pluginManagement.repositories {
        val orgXtcLangRepoPlugins: () -> MavenArtifactRepository by extra { { XtcRepoProvider(this).createGitHubMavenArtifactRepository() } }
        val xdkRepoPlugins: () -> MavenArtifactRepository by extra { { XtcRepoProvider(this).createLocalDistMavenArtifactRepository() } }
    }
    @Suppress("UnstableApiUsage")
    settings.dependencyResolutionManagement.repositories {
        val orgXtcLangRepo: () -> MavenArtifactRepository by extra { { XtcRepoProvider(this).createGitHubMavenArtifactRepository() } }
        val xdkRepo: () -> MavenArtifactRepository by extra { { XtcRepoProvider(this).createLocalDistMavenArtifactRepository() } }
    }
}

private class XtcRepoProvider(private val repos: RepositoryHandler) {
    private val initDir = gradle.gradleUserHomeDir.resolve("init.d").resolve("xtc-repo.properties")

    fun createLocalDistMavenArtifactRepository(): MavenArtifactRepository {
        return repos.maven {
            val repoPath: Path? = findXdkLocalDist()?.resolve("repo")
            if (repoPath == null || !repoPath.isDirectory()) {
                throw IllegalArgumentException("Cannot resolve any repository data in local XDK distribution.")
            }
            name = "xdkRepo"
            url = repoPath.toUri()
        }.also {
            logger.info("[xdk] *** Added orgXtcLangLocalDist() repository: ${it.name} (url ${it.url})")
        }
    }

    fun createGitHubMavenArtifactRepository(): MavenArtifactRepository {
        return repos.maven {
            @OptIn(ExperimentalEncodingApi::class)
            fun decodeToken(str: String): String {
                return runCatching { Base64.decode(str).toString(Charsets.UTF_8).trim() }.getOrDefault("")
            }
            with(resolveConfig(logger, initDir)) {
                name = "GitHub"
                url = uri(getProperty(XTC_REPO_PROPERTY_URL))
                credentials {
                    username = getProperty(XTC_REPO_PROPERTY_USER)
                    password = decodeToken(getProperty(XTC_REPO_PROPERTY_TOKEN))
                }
            }
        }.also {
            logger.info("[xdk] *** Added orgXtcLang() repository: ${it.name} (url ${it.url})")
        }
    }

    companion object {
        private const val XTC_REPO_INIT_PREFIX = "https://raw.githubusercontent.com/xtclang/xvm/xtc-first-plugin/gradle/config/repos/"
        private const val XTC_REPO_INIT_PROPERTIES_URL = "$XTC_REPO_INIT_PREFIX/xtc-repo.properties.template"
        private const val XTC_REPO_INIT_SCRIPT_URL   = "$XTC_REPO_INIT_PREFIX/xtc-repo.init.gradle.kts.template"

        private const val XTC_REPO_PROPERTY_PREFIX = "org.xtclang.repo.github"
        private const val XTC_REPO_PROPERTY_USER = "$XTC_REPO_PROPERTY_PREFIX.user"
        private const val XTC_REPO_PROPERTY_TOKEN = "$XTC_REPO_PROPERTY_PREFIX.token"
        private const val XTC_REPO_PROPERTY_URL = "$XTC_REPO_PROPERTY_PREFIX.url"

        private const val LAUNCHER = "xec"
        private const val ENV_PATH = "PATH"

        private fun resolveConfig(logger: Logger, initDir: File): Properties {
            fun fromStream(stream: InputStream): Properties {
                return stream.use { Properties().also { it.load(stream) } }
            }

            fun loadFromUrl(url: String): Properties {
                return fromStream(URI(url).toURL().openStream())
            }

            fun loadFromFile(): Properties {
                return fromStream(initDir.inputStream())
            }

            try {
                return loadFromFile().also { logger.info("[xdk] Loaded XTC Repo properties from local path: ${initDir.absolutePath}") }
            } catch (t: Throwable) {
                logger.info("[xdk] init.d: Failed to resolve local properties from: $initDir (will attempt remote URL)")
            }
            try {
                return loadFromUrl(XTC_REPO_INIT_PROPERTIES_URL).also { logger.info("[xdk] Loaded XTC Repo properties from remote URL: $it") }
            } catch (t: Throwable) {
                logger.error("[xdk] init.d: Failed to resolve remote properties from: $XTC_REPO_INIT_PROPERTIES_URL (already gave up on local).")
                throw GradleException(t.message ?: t.javaClass.simpleName, t)
            }
        }

        // TODO: Third alternative may be to grab the local dist from the path to use the "repo" subdirectory in an existing XDK distribution.
        private fun findXdkLocalDist(): Path? {
            return System.getenv(ENV_PATH)?.split(File.pathSeparator)?.map { File(it, LAUNCHER) }?.find { it.exists() && it.canExecute() }?.toPath()?.toRealPath()?.parent?.parent?.parent
        }
    }
}
