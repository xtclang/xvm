# syntax=docker/dockerfile:1
#
# Launcher Builder Dockerfile - Builds native launchers from C source
# Use this to rebuild launchers when the C source changes
#
# Usage:
#   docker buildx build -f Dockerfile.launchers --platform linux/amd64,linux/arm64 --output ./launchers .
#   docker buildx build -f Dockerfile.launchers --platform linux/amd64 --output ./launchers .
#

ARG GH_BRANCH=master
ARG GH_COMMIT
ARG TARGETARCH
ARG TARGETOS

# *** STAGE 1: Source cloning ***
FROM alpine/git:latest AS source-cloner

ARG GH_BRANCH
ARG GH_COMMIT
WORKDIR /source
COPY scripts/clone-xdk.sh /clone-xdk.sh
RUN --mount=type=cache,target=/git-cache,sharing=shared \
    apk add --no-cache bash curl && \
    /clone-xdk.sh "${GH_BRANCH}" "${GH_COMMIT}"

# *** STAGE 2: Launcher builder ***
FROM gcc:latest AS launcher-builder

ARG TARGETARCH
ARG TARGETOS
ENV TMPDIR=/tmp/gcc-cache
WORKDIR /source

# Copy ONLY launcher source (not entire repo) 
COPY --from=source-cloner /source/javatools_launcher/src/main/c/ javatools_launcher/src/main/c/
COPY scripts/build-launcher.sh /build-launcher.sh

RUN --mount=type=cache,target=/tmp/gcc-cache,sharing=locked \
    /build-launcher.sh

# *** STAGE 3: Export stage ***
FROM scratch AS launcher-export
ARG TARGETARCH

COPY --from=launcher-builder /launcher-output/ /

# Export all built launchers with architecture-specific names
# The output will be launcher files named by architecture:
# - linux_launcher_amd64 (for x86_64 builds)  
# - linux_launcher_arm64 (for aarch64 builds)