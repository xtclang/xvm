# syntax=docker/dockerfile:1
#
# XDK Docker Container - Source Build
# Builds XDK from source code with git branch/commit support
#

# Build arguments with defaults
ARG JAVA_VERSION=24
ARG GH_BRANCH=master
ARG GH_COMMIT
ARG TARGETARCH
ARG TARGETOS
ARG NPROC=4

# Resolve commit hash if not provided
FROM alpine:latest AS git-resolver
ARG GH_BRANCH
ARG GH_COMMIT

RUN apk add --no-cache curl jq

RUN if [ -z "$GH_COMMIT" ]; then \
        echo "ðŸ”„ Resolving latest commit for branch: $GH_BRANCH"; \
        RESOLVED_COMMIT=$(curl -fsSL "https://api.github.com/repos/xtclang/xvm/commits/$GH_BRANCH" | jq -r '.sha // "unknown"'); \
        echo "âœ… Resolved commit: $RESOLVED_COMMIT"; \
        echo "export GH_COMMIT=$RESOLVED_COMMIT" > /tmp/resolved-commit.env; \
    else \
        echo "âœ… Using provided commit: $GH_COMMIT"; \
        echo "export GH_COMMIT=$GH_COMMIT" > /tmp/resolved-commit.env; \
    fi

# Source download stage
FROM alpine:latest AS source-downloader
ARG GH_BRANCH
COPY --from=git-resolver /tmp/resolved-commit.env /tmp/resolved-commit.env

RUN apk add --no-cache curl
RUN source /tmp/resolved-commit.env && \
    echo "ðŸ“¦ Downloading source for branch: $GH_BRANCH, commit: $GH_COMMIT" && \
    curl -L -o source.tar.gz "https://github.com/xtclang/xvm/archive/$GH_BRANCH.tar.gz" && \
    tar -xzf source.tar.gz --strip-components=1 && \
    echo "âœ… Source downloaded and extracted"

# Build stage
FROM bellsoft/liberica-openjdk-alpine:${JAVA_VERSION} AS builder
ARG GH_BRANCH
ARG NPROC

COPY --from=git-resolver /tmp/resolved-commit.env /tmp/resolved-commit.env
COPY --from=source-downloader / /workspace/

WORKDIR /workspace

ENV GRADLE_USER_HOME="/root/.gradle" \
    GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=${NPROC} -Dorg.gradle.vfs.watch=false -Dorg.gradle.configureondemand=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dkotlin.compiler.execution.strategy=in-process"

RUN apk add --no-cache bash git

# Initialize minimal git config to avoid git errors
RUN git config --global user.name "Docker Build" && \
    git config --global user.email "docker@build.local"

# Build XDK using resolved git information
RUN source /tmp/resolved-commit.env && \
    export GH_COMMIT="$GH_COMMIT" && \
    export GH_BRANCH="$GH_BRANCH" && \
    echo "ðŸ”§ Building XDK with commit: $GH_COMMIT, branch: $GH_BRANCH" && \
    ./gradlew --gradle-user-home="$GRADLE_USER_HOME" \
        -x test -x check \
        xdk:distZip && \
    echo "âœ… XDK build completed"

# Extract the built distribution
RUN cd xdk/build/distributions && \
    unzip -q *.zip && \
    DIST_DIR=$(find . -maxdepth 1 -type d -name "*xdk*" | head -1) && \
    mv "$DIST_DIR" /workspace/xdk-built

# Runtime stage  
FROM bellsoft/liberica-runtime-container:jre-${JAVA_VERSION}-slim-musl

ENV XDK_HOME=/opt/xdk
ENV PATH="${XDK_HOME}/bin:${PATH}"

# Copy built XDK distribution
COPY --from=builder /workspace/xdk-built /opt/xdk/

# Copy Docker test program
COPY test/DockerTest.x /opt/xdk/test/

# Ensure launchers are executable and test functionality
RUN chmod +x /opt/xdk/bin/xec /opt/xdk/bin/xcc && \
    echo "ðŸ§ª Testing XDK functionality..." && \
    /opt/xdk/bin/xec --version && \
    /opt/xdk/bin/xcc --version && \
    echo "âœ… XDK source build ready!"

CMD ["xec"]