#
# Gradle properties.
#

org.gradle.parallel=true
org.gradle.caching=true
org.gradle.caching.debug=false
# TODO: Enable after incubation
org.gradle.configureondemand=false

# Enable Java toolchain auto-provisioning
# Always download a missing JDK to GRADLE_USER_HOME, even if it is installed on the system.
org.gradle.java.installations.auto-download=true
# Disable system Java detection to force toolchain downloads
org.gradle.java.installations.auto-detect=false
# Configuration cache can speed up builds but may have compatibility issues - enable if stable
org.gradle.configuration-cache=true
org.gradle.configuration-cache-problems=fail
# Maximum debugging for configuration cache
# Enable verbose debug logging for configuration cache operations
org.gradle.configuration-cache.debug=true
# Enable internal detailed reporting for configuration cache
org.gradle.configuration-cache.internal.report=true
# Increase max problems reported from default 512 to 1000
org.gradle.configuration-cache.max-problems=1000
# Do not ignore valid build scripts (ensure full checking)
org.gradle.configuration-cache.ignore-valid-build-scripts=false
# Enable unsafe mode to show more detailed problems
org.gradle.unsafe.configuration-cache=true

# File system watching for incremental builds (can speed up incremental builds)
# TODO: Temporarily turned off since the configuration cache is stupid and likes metadata dirs with fllewatch data.
org.gradle.vfs.watch=false

# JVM and Gradle daemon flags. The default memory usage is 700M for a Daemon, which can be slow in extreme environments.
# NOTE: Native access warnings from Gradle's platform library cannot be suppressed via gradle.properties
# as they occur too early in the JVM startup process. The warnings are from Gradle itself and will be
# addressed in future Gradle versions. Use GRADLE_OPTS="--enable-native-access=ALL-UNNAMED" if needed.
org.gradle.jvmargs=-Dfile.encoding=UTF-8

# Logging and warning levels
#
# (Console value can be one of: auto, plain, rich, verbose (default is auto),
#  warning mode can be one of: none, summary, all, fail  (default is summary))
org.gradle.console=auto
org.gradle.warning.mode=all
#org.gradle.logging.stacktrace=all

systemProp.gradle.internal.publish.checksums.insecure=true

#
# Should we include the manualTests project as part of the aggregated XVM build?
#
# It is STRONGLY recommended to keep this "true", because otherwise you don't get IDE support. IntelliJ
# requires any project you want to work with to be declared in the build, or it will be invisible.
#
# If you experience build speed issues, set "includeBuildAttachManualTests" to false, which will make it
# show up in IntelliJ, get configured quickly, but not include any part of the build lifecycle from root,
# so that a "build" will not also trigger compilation of the manual tests source set. For GitHub
# workflows, we always run with manual tests both enabled as includedBuild, and attached to the
# XDK root build lifecycle.
#
# You can also locally override these properties with environment variables, just like any
# other Gradle property prefixed with "ORG_GRADLE_PROJECT_", for example
# ORG_GRADLE_PROJECT_includeBuildManualTests=false, if you want to persist a different
# behavior than the default in your build environment,.
#
includeBuildManualTests=true
includeBuildAttachManualTests=false

#
# Publishing Credentials Configuration
#
# The XVM project supports publishing to multiple repositories: GitHub Packages,
# Gradle Plugin Portal, and Maven Central. Credentials are required only for
# enabled publishing targets.
#
# GITHUB PACKAGES (enabled by default via org.xtclang.publish.gitHub=true)
# Required when publishing to GitHub Packages repository
#GitHubUsername=your-github-username
#GitHubPassword=your-personal-access-token
# Alternative: Use environment variables GITHUB_ACTOR and GITHUB_TOKEN (auto-set in CI)

# GRADLE PLUGIN PORTAL (disabled by default)
# Required when org.xtclang.publish.gradlePluginPortal=true
# Get credentials from: https://plugins.gradle.org/ -> "My API Keys"
#gradle.publish.key=your-plugin-portal-key
#gradle.publish.secret=your-plugin-portal-secret
# Alternative: Use environment variables GRADLE_PUBLISH_KEY and GRADLE_PUBLISH_SECRET

# MAVEN CENTRAL (disabled by default)
# Required when org.xtclang.publish.mavenCentral=true
# Get Sonatype credentials from: https://central.sonatype.org/
# Maven Central credentials are in ~/.gradle/gradle.properties (private)
#mavenCentralUsername=your-username
#mavenCentralPassword=your-password
# Alternative: Use environment variables SONATYPE_USERNAME and SONATYPE_PASSWORD
# (Legacy OSSRH_USERNAME and OSSRH_PASSWORD are also supported)

# GPG SIGNING (required for Maven Central)
# GPG signing is automatically handled by the Vanniktech plugin when Maven Central is enabled
#
# COMPLETE WORKFLOW: Generate and Publish New GPG Keys for Maven Central
# 1. Generate new key (no passphrase for automation):
#    gpg --batch --generate-key << 'EOF'
#    Key-Type: RSA
#    Key-Length: 4096
#    Subkey-Type: RSA
#    Subkey-Length: 4096
#    Name-Real: Marcus Lagergren
#    Name-Email: marcus.lagergren@xqiz.it
#    Expire-Date: 2y
#    %no-protection
#    EOF
#
# 2. Get key information:
#    gpg --list-secret-keys --keyid-format SHORT
#
# 3. Update this gradle.properties file with new signing.keyId
#
# 4. Publish public key to keyservers (REQUIRED for Maven Central):
#    gpg --keyserver keyserver.ubuntu.com --send-keys [KEYID]
#    gpg --keyserver keys.openpgp.org --send-keys [KEYID]
#
# 5. Verify upload worked:
#    gpg --keyserver keyserver.ubuntu.com --search-keys marcus.lagergren@xqiz.it
#
# 6. Test signing with: ./gradlew xdk:publishToMavenLocal -Porg.xtclang.publish.mavenCentral=true
#
# Current GPG Key Information:
# - Key ID (short): 96080E1D
# - Key ID (full): CBB9D99261C9E77FF9504951F5D366F696080E1D
# - Name: Marcus Lagergren <marcus.lagergren@xqiz.it>
# - Created: 2025-09-25
# - Expires: 2027-09-25
# - No passphrase (for automation)
# - Revocation certificate: /Users/marcus/.gnupg/openpgp-revocs.d/CBB9D99261C9E77FF9504951F5D366F696080E1D.rev
#
# GPG Key Generation (how this key was created):
# gpg --batch --generate-key << 'EOF'
# Key-Type: RSA
# Key-Length: 4096
# Subkey-Type: RSA
# Subkey-Length: 4096
# Name-Real: <xtcuser>
# Name-Email: <xtcuser>@xqiz.it
# Expire-Date: 2y
# %no-protection
# EOF
#
# GPG Key Management Commands:
# - List keys: gpg --list-secret-keys --keyid-format SHORT
# - Export public key: gpg --armor --export 96080E1D
# - Export private key: gpg --armor --export-secret-keys 96080E1D
#
# Public Key Distribution (REQUIRED for Maven Central):
# Maven Central requires that your public key be available on public keyservers.
# Upload to multiple keyservers for redundancy:
# - Upload to Ubuntu keyserver: gpg --keyserver keyserver.ubuntu.com --send-keys 96080E1D
# - Upload to MIT keyserver: gpg --keyserver pgp.mit.edu --send-keys 96080E1D
# - Upload to OpenPGP keyserver: gpg --keyserver keys.openpgp.org --send-keys 96080E1D
#
# Verification (check if key was uploaded successfully):
# - gpg --keyserver keyserver.ubuntu.com --search-keys marcus.lagergren@xqiz.it
# - gpg --keyserver pgp.mit.edu --search-keys marcus.lagergren@xqiz.it
#
# - Revoke key: gpg --import /Users/marcus/.gnupg/openpgp-revocs.d/CBB9D99261C9E77FF9504951F5D366F696080E1D.rev
# - Delete key: gpg --delete-secret-keys 96080E1D && gpg --delete-keys 96080E1D
#
# GPG signing credentials are in ~/.gradle/gradle.properties (private)
#signing.keyId=your-key-id
# No password needed - key was created without passphrase for automation
# Alternative: Use environment variables SIGNING_KEY_ID, SIGNING_PASSWORD, SIGNING_SECRET_KEY_RING_FILE
