#
# Gradle properties.
#

org.gradle.parallel=true
org.gradle.caching=true

# TODO: Enable after incubation
org.gradle.configureondemand=false

# Enable Java toolchain auto-provisioning
# Always download a missing JDK to GRADLE_USER_HOME, even if it is installed on the system.
org.gradle.java.installations.auto-download=true
# Disable system Java detection to force toolchain downloads
org.gradle.java.installations.auto-detect=false

# Configuration cache can speed up builds but may have compatibility issues.
# It is always enabled to ensure no code gets incompatible with the configuration cache.
#
# Configuration cache problem handling:
#   warn - report problems but don't fail
#   fail - fail build on configuration cache problems
# Enable verbose cache operations logging (useful for debugging cache hits/misses)
# Configuration cache debugging (currently enabled for development):
# Verbose debug logging for configuration cache operations
# Internal detailed reporting for configuration cache
# Increase max problems reported from default 512 to 1000
# Gradle performs full validation of ALL build scripts for configuration cache compatibility
# Do not ignore valid build scripts (ensure full checking)
# Enable unsafe mode to show more detailed problems
#
org.gradle.configuration-cache=true

org.gradle.configuration-cache-problems=fail
org.gradle.caching.debug=false
org.gradle.configuration-cache.debug=true
org.gradle.configuration-cache.internal.report=true
org.gradle.configuration-cache.max-problems=1000
org.gradle.configuration-cache.ignore-valid-build-scripts=false
org.gradle.unsafe.configuration-cache=false

# File system watching for incremental builds (can speed up incremental builds)
org.gradle.vfs.watch=true
# Optionally enable verbose VFS logging (useful for debugging file watching issues)
org.gradle.vfs.verbose=false

# JVM and Gradle daemon flags. The default memory usage is 700M for a Daemon, which can be slow in extreme environments.
# Note: --enable-native-access=ALL-UNNAMED suppresses warnings from Gradle's native platform library
org.gradle.jvmargs=-Dfile.encoding=UTF-8 --enable-native-access=ALL-UNNAMED

# Logging and warning levels
#
# Console output modes:
#   auto (default) - detects terminal capabilities
#   plain - no colors or formatting
#   rich - colors and formatting
#   verbose - maximum output detail
org.gradle.console=auto

# Warning modes:
#   none - suppress warnings
#   summary (default) - show summary of warnings
#   all - show all warnings
#   fail - treat warnings as errors
org.gradle.warning.mode=all

# Stacktrace modes (uncomment to enable):
# The default is to not set it at all.
#
#   internal - internal Gradle errors only
#   all - all stacktraces
#org.gradle.logging.stacktrace=all

# Welcome message (uncomment to suppress):
#   once (default) - show once per Gradle version
#   never - never show
org.gradle.welcome=never

#
# Should we include the manualTests project as part of the aggregated XVM build?
#
# It is STRONGLY recommended to keep this "true", because otherwise you don't get IDE support. IntelliJ
# requires any project you want to work with to be declared in the build, or it will be invisible.
#
# If you experience build speed issues, set "includeBuildAttachManualTests" to false, which will make it
# show up in IntelliJ, get configured quickly, but not include any part of the build lifecycle from root,
# so that a "build" will not also trigger compilation of the manual tests source set. For GitHub
# workflows, we always run with manual tests both enabled as includedBuild, and attached to the
# XDK root build lifecycle.
#
# You can also locally override these properties with environment variables, just like any
# other Gradle property prefixed with "ORG_GRADLE_PROJECT_", for example
# ORG_GRADLE_PROJECT_includeBuildManualTests=false, if you want to persist a different
# behavior than the default in your build environment,.
#
includeBuildManualTests=true
includeBuildAttachManualTests=false
