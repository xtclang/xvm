#
# Gradle properties.
#

org.gradle.parallel=true
org.gradle.caching=true
org.gradle.caching.debug=false

# TODO: Experiment with enabling the configuration cache later
org.gradle.configuration-cache=false

# The "debug" property (default false) enables gradle debug mode. For the kotlin dsl, you can also step through
# build scripts.
#
# (See: https://docs.gradle.org/current/userguide/troubleshooting.html#sec:troubleshooting_build_logic
#  This will halt the build and allow you to attach a remote debugger to a specific port. The default is,
#  5005, and you may have to use --no-daemon as well, unless you attach to a suspended task.)
org.gradle.debug=false
org.gradle.debug.port=5005

# JVM and Gradle daemon flags. The default memory usage is 700M for a Daemon, which can be slow in extreme environments.
org.gradle.jvmargs=-Dfile.encoding=UTF-8 -Xmx4G

# Logging and warning levels
# (Console value can be one of: auto, plain, rich, verbose (default is auto),
#  warning mode can be one of: none, summary, all, fail  (default is summary))
org.gradle.console=auto
org.gradle.warning.mode=summary
#org.gradle.logging.stacktrace=all

systemProp.gradle.internal.publish.checksums.insecure=true

# Should we include the manualTests projects as part of the aggregated XVM build?
#
# Default is false, we do not usually add manual tests as an included build. However, it may be quite
# useful if you are working on the XTC Plugin, or something like that, as a DSL verification step.
# We should add the manual tests to the GitHub action, anyway, to ensure that they build and run for
# our GitHub runner sanity checks required for merge permissions checks the manualTest build.
#shouldIncludeManualTests=false
