package org.xvm.cc_explore.xclz;

import org.xvm.cc_explore.*;
import org.xvm.cc_explore.cons.*;
import org.xvm.cc_explore.util.NonBlockingHashMapLong;
import org.xvm.cc_explore.util.SB;

import java.lang.Character;
import java.util.BitSet;
import java.util.HashMap;
import javax.lang.model.SourceVersion;
import java.lang.reflect.Constructor;

// Some kind of base class for a Java class that implements an XTC Module
public class XClzBuilder {
  public final ModPart _mod;
  public final SB _sb;
  public XClz _xclz;            // Java class

  // Fields for emitting a Method Code
  public MethodPart _meth;      // Method whose code is being parsed
  private CPool _pool;          // Parser for code buffer
  public int _lexical_depth;    // Lexical scope depth
  public int _opn;              // Current opcode
  final HashMap<String,String> _names; // Java namification
  final NonBlockingHashMapLong<String> _locals; // Virtual register numbers to java names
  int _nlocals;                 // Number of locals defined
  XOp[] _xops;
  
  public XClzBuilder( ModPart mod ) {
    System.err.println("Making XClz for "+mod);
    _mod = mod;
    _sb = new SB();
    _names = new HashMap<>();
    _locals = new NonBlockingHashMapLong<>();

    // Let's start by assuming if we're here, we're inside the top-level
    // ecstasy package - otherwise we're nested instead the mirror for the
    // containing package.
    assert mod.child("ecstasy") instanceof PackagePart;

    // The Java class will extend XClz.
    // The Java class name will be the mangled module class-name.
    String java_class_name = "J"+mod._name;
    jclass_body(java_class_name);
    
    //System.out.println(_sb);
    try {
      Class<XClz> clz = XClzCompiler.compile("org.xvm.cc_explore.xclz."+java_class_name, _sb);
      Constructor<XClz> xcon = clz.getConstructor(Container.class);
      XClz xclz = xcon.newInstance(new NativeContainer());
      xclz.run();
    } catch( Exception ie ) {
      throw XEC.TODO();
    }
  }

  // Fill in the body of the matching java class
  private void jclass_body( String java_class_name ) {
    _sb.p("// Auto Generated by XEC from ").p(_mod._dir._str).p(_mod._path._str).nl().nl();
    _sb.p("package org.xvm.cc_explore.xclz;").nl().nl();
    _sb.p("import org.xvm.cc_explore.Container;").nl();
    _sb.p("import org.xvm.cc_explore.XConsole;").nl();
    _sb.nl();
    _sb.p("public class ").p(java_class_name).p(" extends XClz {").nl().ii();

    // Required constructor to inject the container
    _sb.ip("public ").p(java_class_name).p("( Container container ) { super(container); }").nl();
    
    // Look for a module init.  This will become the Java <clinit>
    MMethodPart mm = (MMethodPart)_mod.child("construct");
    MethodPart construct = (MethodPart)mm.child(mm._name);
    if( construct != null ) {
      assert construct._sibling==null;
      // Skip common empty constructor
      if( !construct.is_empty_function() ) {
        _sb.nl();
        _sb.ip("static {").nl();
        jcode(construct);
        _sb.ip("}").nl().nl();
      }
    }

    // Output Java methods for all Module methods
    // TODO: Classes in a Module?
    for( Part part : _mod._name2kid.values() ) {
      if( part instanceof MMethodPart mmp ) {
        if( mmp._name.equals("construct") ) continue; // Already handled module constructor
        MethodPart meth = (MethodPart)mmp.child(mmp._name);
        jmethod(meth);
      } else if( part instanceof PackagePart pp ) {
        // Self module is OK
      } else {
        throw XEC.TODO();
      }
    }

    // End the class body
    _sb.di().p("}").nl();
  }
  
  // Emit a Java string for this MethodPart.
  // Already _sb has the indent set.
  private void jmethod( MethodPart m ) {
    _sb.ip("public ");
    if( m._rets==null ) _sb.p("void ");
    else throw XEC.TODO();
    _sb.p(m._name).p("(");
    if( m._args!=null ) throw XEC.TODO();
    _sb.p(") {").nl();
    jcode(m);
    _sb.ip("}").nl().nl();
  }

  // Generate a Java string code for this MethodPart
  // Already wrapped in the `ret fcn_name(args) {` and `}`.
  // Already _sb has the indent set.
  private void jcode( MethodPart m ) {
    _meth = m;
    _pool = new CPool(m._code,1.2); // Setup the constant pool parser
    assert _lexical_depth==0;       // No scopes added
    assert _names.isEmpty();        // No names mapping yet
    assert _locals.isEmpty() && _nlocals==0; // No locals mapped yet

    // Parse all opcodes into XOPs
    int nops = u31();               // Number of opcodes (since varying size)
    _xops = new XOp[nops];
    for( _opn =0; _opn <nops; _opn++ )
      _xops[_opn] = Op.OPS[u8()]._emit.apply(this);

    // Pass#2 fixup
    // Forward branches that exactly skip an EXIT, hit it
    for( _opn =0; _opn <nops; _opn++ )
      _xops[_opn].pass2(this);
    
    // Now pretty-print java code
    _sb.ii();                       // Indent code
    emit(0,nops);
    _sb.di();                   // Un-indent code

    _locals.clear(); _nlocals=0;// No locals mapping
    _names.clear();             // No names mapping
    assert _lexical_depth==0;   // All scopes back to outer
  }

  // Funny recursive emit logic
  public void emit( int begin, int end ) {
    _opn = begin;
    while( _opn != end ) {
      if( _xops[_opn]._loop )
        _sb.ip("while( true ) {").ii().nl();
      _xops[_opn].emit(this);
      _opn++;
    }
  }

  
  int u8 () { return _pool.u8 (); }
  int u31() { return _pool.u31(); }
  long pack64() { return _pool.pack64(); }

  // --------------------------------------------------------------------------

  void define( String name ) {
    // Track active locals
    _locals.put(_nlocals++,name);
  }

  Const methcon() { return methcon(pack64()); }
  // Magic constant for indexing into the constant pool.
  private static final int CONSTANT_OFFSET = -17;
  // Read a method constant.  Advances the parse point.
  Const methcon(long idx) {
    // CONSTANT_OFFSET >= idx: uses a method constant
    assert idx <= CONSTANT_OFFSET && ((int)idx)==idx;
    return _meth._cons[CONSTANT_OFFSET - (int)idx];
  }

  // Make up a valid name
  String jname( String jtype ) {
    if( jtype==null ) return _jname("expr");
    if( "long".equals(jtype) ) return _jname("x");
    throw XEC.TODO();
  }
  
  // Return a java-valid name
  String jname_methcon( ) {
    String name = ((StringCon)methcon())._str;
    return _jname(name);
  }

  // After the basic mangle, dups are suffixed 1,2,3...
  private String _jname( String name ) {
    String s = _mangle(name);
    boolean unique = true;
    int max = 0;
    for( String old : _locals.values() ) {
      if( s.equals(old) ) unique = false;
      else if( old.startsWith(s) ) {
        int last = old.length();
        while( Character.isDigit(old.charAt(last-1)) ) last--;
        int num = Integer.parseInt(old.substring(last));
        max = Math.max(max,num);
      }
    }

    return unique ? s : s+(max+1);
  }

  // If the name is a valid java id, keep it.
  // If the name starts "loop#", use "i"
  // keep the valid prefix, and add $.
  private String _mangle( String name ) {
    // Valid java name, just keep it
    // Valid except a keyword, add "$"
    if( SourceVersion.isIdentifier(name) )
      return SourceVersion.isKeyword(name) ? name+"$" : name;
    // Starts with "loop#", assume it is a generated loop variable for iterators
    if( name.startsWith("loop#") ) return "i";
    // Keep valid prefix and add "$"
    throw XEC.TODO();
  }
  
  // Produce a java type from a method constant
  String jtype_methcon() { return jtype_ttcon( (TermTCon)methcon() ); }  
  // Produce a java type from a TermTCon
  String jtype_ttcon( TermTCon ttc ) {
    ClassPart clz = (ClassPart)ttc.part();
    if( clz._name.equals("Console") && clz._path._str.equals("ecstasy/io/Console.x") )
      return "XConsole";
    if( clz._name.equals("Int64") && clz._path._str.equals("ecstasy/numbers/Int64.x") )
      return "long";
    if( clz._name.equals("Boolean") && clz._path._str.equals("ecstasy/Boolean.x") )
      return "boolean";
    throw XEC.TODO();
  }  


  // Read an R-value.  Advances the parse point.
  String rvalue() {
    long idx = pack64();
    // CONSTANT_OFFSET >= idx: uses a method constant
    if( idx <= CONSTANT_OFFSET ) return value_tcon((TCon)methcon(idx));
    // Predefined arguments
    if( idx == -5 ) return null;
    String s = _locals.get(idx);
    assert s != null;
    return s;
  }

  // Read an L-value.  Advances the parse point.
  String lvalue() { return _locals.get(pack64()); }

  
  // Produce a java value from a TCon
  public static String value_tcon( TCon tc ) {
    if( tc instanceof IntCon ic ) {
      if( ic._big != null ) throw XEC.TODO();
      long x = ic._x;
      String s = ""+x;
      return (int)x == x ? s : s+"L";
    }
    if( tc instanceof StringCon sc )
      return "\""+sc._str+"\"";
    throw XEC.TODO();
  }

  
  // Produce a java value from a TermTCon
  String jvalue_ttcon( TermTCon ttc ) {
    ClassPart clz = (ClassPart)ttc.part();
    if( clz._name.equals("Console") && clz._path._str.equals("ecstasy/io/Console.x") )
      return "_container.console()";
    throw XEC.TODO();
  }  
}
